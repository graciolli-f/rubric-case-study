**DO FIRST:**
BEFORE planning or writing any code, extract the rules from these files:
1. @rubric/RUBRIC.md 
2. @rubric/ARCHITECTURE.yaml 
3. @rubric/GlobalSpecs.rux  
4. @rubric/DesignSystem.rux
THEN incorportate these rules into all future coding plans.

**MANDATORY RUBRIC COMPLIANCE:** 
Before creating ANY new file in `src/`, you MUST first create the corresponding .rux constraint file in `rubric/app/[matching-path]` NO EXCEPTIONS. If you create code without first creating the .rux file, you are violating the architectural law of this project.

**MANDATORY RUBRIC RULES:**
- Constraints are IMMUTABLE - you may not change any code inside `constraints {}` in a .rux file
- If constraints are causing code issues, change the code (js, ts, jsx, etc) NOT the .rux file
- If you cannot move forward by changing the code due to constraints, ask the user
- Constraints trump all other declarations. Example: if an import is `deny` in `constaints {}`, and also `allow` in `imports {}`, the `deny` in `constraints {}` wins
- You must iterate until `validate.js` script results in 0 errors
- The `validate.js` file is Read-Only - you may not edit it

**MANDATORY WORKFLOW:**
1. CREATE .rux file first (using corresponding template in `rubric/templates/[type].rux.template`) if one does not already exist
2. CHECK each .rux files for conflicts between `allow` and `deny` 
EXAMPLE: 
*This is ILLEGAL because `../services/[file]` is allowed in imports but `../services/*` is denied in constraints:* 
*Verdit: Constraints are immutable and ALWAYS win*
```
imports {
    allow "../services/receipt-service" as {processReceiptFile}
}
constaints {
    deny imports ["../services/*", "../data/*"]   @ "Use store for data operations"
}
```
3. RESOLVE all conflicts within .rux files before continuing
4. PLAN code to fit constraints  
5. WRITE code following the spec in the constraints rux file AND in the GlobalSpecs.rux file
7. RUN through the "Common Bug Prevention Checklist" in the `rubric/RUBRIC.md` file and fix any issues
7. DOCUMENT the result of this bug checklist in a file called `rubric/BUGS.md` - append if exists
8. RUN `node rubric/validate.js` → must show "All constraints passed!"
9. If violations exist → fix code (not .rux files)
10. Repeat until clean validation

**If you create ANY source file without its .rux file first, you have FAILED.**
**If you allow conflicts within .rux files, you have FAILED**
**If you do not run `node rubric/validate.js`, you have FAILED**